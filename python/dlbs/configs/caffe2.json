{
  "parameters": {
    "caffe2.launcher": {
      "val": "${DLBS_ROOT}/scripts/launchers/caffe2.sh",
      "type": "str",
      "desc": "Path to script that launches Caffe2 benchmarks."
    },
    "caffe2.data_dir": {
      "val": "",
      "type": "str",
      "desc": "A data directory if real data should be used. If empty, synthetic data is used (no data ingestion pipeline)."
    },
    "caffe2.num_decode_threads": {
      "val": 1,
      "type": "int",
      "desc": [
        "Number of image decode threads when real dataset is used. For deep compute intensive models it can be as small as 1.",
        "For high throughput models such as AlexNetOWT it should be set to 6-8 threads for 4 V100 to provide ~ 9k images/second"
      ]
    },
    "caffe2.float16_compute": {
      "val": "$('${exp.dtype}' == 'float16')$",
      "type": "bool",
      "desc": "Enable FP16 SGD optimizer. If false, multi-precision SGD optimizer will be used."
    },
    "caffe2.data_backend": {
      "val": "lmdb",
      "type": "str",
      "desc": "In case of real data, specifies its storage backend ('lmdb')."
    },
    "caffe2.args": {
      "val": [
        "--model=${exp.model}",
        "$('--forward_only' if '${exp.phase}'=='inference' else '')$",
        "--batch_size=${exp.replica_batch}",
        "--num_batches=${exp.num_batches}",
        "--num_warmup_batches=${exp.num_warmup_batches}",
        "--num_gpus=${exp.num_local_gpus}",
        "--device=${exp.device_type}",
        "--data_dir=$('' if not '${exp.data_dir}' else '${exp.data_dir}' if ${exp.docker} is False else '/workspace/data')$",
        "--data_backend=${caffe2.data_backend}",
        "--dtype=${exp.dtype}",
        "$('--enable_tensor_core' if ${exp.use_tensor_core} is True else '')$",
        "--num_decode_threads=${caffe2.num_decode_threads}",
        "--float16_compute=$('true' if ${caffe2.float16_compute} else 'false')$",
        "--num_workers=${exp.num_nodes}",
        "--rendezvous=$('file:///workspace/rendezvous' if '${caffe2.rendezvous}'.startswith('file://') and ${exp.docker} else '${caffe2.rendezvous}')$",
        "--run_id=${caffe2.run_id}",
        "--rank=${caffe2.rank}",
        "--transport=${caffe2.transport}",
        "--interface=${caffe2.interface}"
      ],
      "type": "str",
      "desc": "Command line arguments that launcher uses to launch caffe2_benchmark script."
    },
    "caffe2.docker_image": {
      "val": "nvcr.io/nvidia/caffe2:18.05-py2",
      "type": "str",
      "desc": "The name of a docker image for Caffe2 if containerized benchmark is requested."
    },
    "caffe2.docker_args": {
      "val": [
        "-i",
        "--security-opt seccomp=unconfined",
        "--pid=host",
        "--volume=${DLBS_ROOT}/python/caffe2_benchmarks:/workspace/caffe2_benchmarks",
        "$('--volume=${runtime.cuda_cache}:/workspace/cuda_cache' if '${runtime.cuda_cache}' else '')$",
        "$('--volume=${monitor.pid_folder}:/workspace/tmp' if ${monitor.frequency} > 0 else '')$",
        "$('--volume=${exp.data_dir}:/workspace/data' if '${exp.data_dir}' else '')$",
        "$('--volume=%s:/workspace/rendezvous' % '${caffe2.rendezvous}'[7:] if '${caffe2.rendezvous}'.startswith('file://') and ${exp.docker} else '')$",
        "${exp.docker_args}",
        "${exp.docker_image}"
      ],
      "type": "str",
      "desc": "In case if containerized benchmarks, this are the docker parameters for Caffe2."
    },
    "caffe2.bench_path": {
      "val": "$('${DLBS_ROOT}/python' if not ${exp.docker} else '/workspace')$",
      "type": "str",
      "desc": "Python path to where mxnet_benchmarks project is located. Depends on bare metal/docker benchmark."
    },
    "caffe2.host_python_path": {
      "val": "${HOME}/projects/caffe2/build",
      "type": "str",
      "desc": "Path to a Caffe2's python folder in case of a bare metal run."
    },
    "caffe2.host_libpath": {
      "val": "${HOME}/projects/caffe2/build/caffe2",
      "type": "str",
      "desc": "Basically, it's a LD_LIBRARY_PATH for Caffe2 in case of a bare metal run."
    },
    "caffe2.rendezvous": {
      "val": "file:///tmp/caffe2_rendezvous",
      "type": "str",
      "desc": "A randezvous for distributed training. redis://HOST:PORT or file:///path/to/. Path must exist."
    },
    "caffe2.run_id": {
      "val": "0001",
      "type": "str",
      "desc": "An ID for a distributed benchmark. Must be the same for all workers."
    },
    "caffe2.rank": {
      "val": 0,
      "type": "int",
      "desc": "Rank for this worker."
    },
    "caffe2.transport": {
      "val": "tcp",
      "type": "str",
      "desc": "Distributed transport (tcp|ibverbs)."
    },
    "caffe2.interface": {
      "val": "",
      "type": "str",
      "desc": "Network interface to use (ib0,...)."
    }
  },
  "extensions": [
    {"condition":{ "exp.framework": "caffe2"}, "parameters": { "exp.framework_title": "Caffe2" }},
    {
      "condition":{ "exp.framework": "caffe2", "exp.docker": true },
      "parameters": { "caffe2.env": [
        "PYTHONPATH=$('${caffe2.bench_path}:\\$PYTHONPATH'.strip(' \t:'))$",
        "${runtime.EXPORT_CUDA_CACHE_PATH}",
        "${runtime.EXPORT_CUDA_VISIBLE_DEVICES}"
      ]}
    },
    {
      "condition":{ "exp.framework": "caffe2", "exp.docker": false },
      "parameters": { "caffe2.env": [
        "PYTHONPATH=$('${caffe2.bench_path}:${caffe2.host_python_path}:\\$PYTHONPATH'.strip(' \t:'))$",
        "LD_LIBRARY_PATH=$('${caffe2.host_libpath}:\\$LD_LIBRARY_PATH'.strip(' \t:'))$",
        "${runtime.EXPORT_CUDA_CACHE_PATH}",
        "${runtime.EXPORT_CUDA_VISIBLE_DEVICES}"
      ]}
    }
  ]
}
